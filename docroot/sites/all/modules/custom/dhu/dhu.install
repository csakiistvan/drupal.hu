<?php

/**
 * @file
 * Install, update and uninstall functions for the Drupal.hu module.
 */

/**
 * Implements hook_update_dependencies().
 */
function dhu_update_dependencies() {
  return array(
    'dhu' => array(
      7107 => array(
        'geofield' => 7202,
      ),
    ),
  );
}

/**
 * Implements hook_update_N().
 *
 * Disable modules: geocode.
 */
function dhu_update_7101(&$sandbox) {
  $messages = array();

  $modules_to_disable = array('geocode');
  module_disable($modules_to_disable);
  $messages[] = t('Disable modules: @modules.', array(
    '@modules' => implode(', ', $modules_to_disable),
  ));

  return implode('<br />', $messages);
}

/**
 * Implements hook_update_N().
 */
function dhu_update_7102(&$sandbox) {
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('filename', 'profiles/standard/standard.profile')
    ->execute();

  return t('Issue #1170360 - Undefined index: distribution_name in drupal_install_profile_distribution_name()');
}

/**
 * Implements hook_update_N().
 */
function dhu_update_7103(&$sandbox) {
  //////////////////////////////////
  // Feed API uninstall
  // https://github.com/drupalhu/drupal.hu/issues/76
  //////////////////////////////////

  $tables_to_drop = array('feedapi', 'feedapi_stat', 'feedapi_node_item', 'feedapi_node_item_feed', 'parser_common_syndication');
  foreach ($tables_to_drop as $table) {
    if (db_table_exists($table)) {
      db_drop_table($table);
    }
  }

  // Delete variables site-wide
  variable_del('feedapi_allowed_html_tags');
  variable_del('feedapi_allow_html_all');
  variable_del('feedapi_cron_percentage');

  // Delete variables per-content-type
  $types = db_query('SELECT * FROM {node_type}')->fetchAllAssoc('type', PDO::FETCH_OBJ);
  foreach ($types as $type => $data) {
    variable_del('feedapi_settings_'. $type);
  }

  // Empty parser common syndication cache directory.
  $cache_dir = variable_get('parser_common_syndication_cache', FALSE);
  if (is_dir($cache_dir)) {
    $dp = opendir($cache_dir);
    while (($file = readdir($dp)) !== FALSE) {
      if (is_file($file)) {
        unlink($cache_dir .'/'. $file);
      }
    }
    closedir($dp);
    rmdir($cache_dir);
  }
  variable_del('parser_common_syndication_cache');

  // Empty parser simplepie cache directory
  $cache_dir = variable_get('parser_simplepie_cache', FALSE);
  if (is_dir($cache_dir)) {
    $dp = opendir($cache_dir);
    while (($file = readdir($dp)) !== FALSE) {
      if (is_file($file)) {
        unlink($cache_dir .'/'. $file);
      }
    }
    closedir($dp);
    rmdir($cache_dir);
  }
  variable_del('parser_simplepie_cache');

  // Emtpy global variables
  variable_del('feedapi_settings_feed');
  menu_rebuild();
}

/**
 * Implements hook_update_N().
 */
function dhu_update_7104() {
  $modules_to_enable = array('memcache');
  module_enable($modules_to_enable);
}

/**
 * Enable admin_views module, issue-175.
 */
function dhu_update_7105() {
  $modules_to_enable = array('admin_views');
  module_enable($modules_to_enable);
}
/**
 * Enable the recaptcha module, issue-189.
 */
function dhu_update_7106() {
  $modules_to_enable = array('recaptcha');
  module_enable($modules_to_enable);
}

/**
 * Revert all OpenLayers layers and maps; Enable the "Drupal.hu Event" module.
 */
function dhu_update_7107() {
  $messages = array();

  foreach (openlayers_layers_load() as $layer) {
    openlayers_layer_delete($layer);
  }
  $messages[] = t('All OpenLayers layers has been reverted to default state.');

  foreach (openlayers_maps() as $map) {
    openlayers_map_delete($map);
  }
  $messages[] = t('Revert all OpenLayers maps has been reverted to default state.');

  module_enable(array('dhu_event'));

  return implode('<br />', $messages);
}

/**
 * Uninstall PHP module.
 */
function dhu_update_7108(&$sandbox) {
  $messages = array();

  module_disable(array('php'));
  $messages[] = t('The PHP module has been disabled.');

  drupal_uninstall_modules(array('php'));
  $messages[] = t('The PHP module has been uninstalled.');

  db_delete('filter_format')
    ->condition('format', 'php_code')
    ->execute();

  db_delete('filter')
    ->condition('module', 'php')
    ->execute();

  return implode((drupal_is_cli() ? PHP_EOL : '<br />'), $messages);
}

/**
 * Disable Browserclass module.
 */
function dhu_update_7109(&$sandbox) {
  module_disable(array(
    'browserclass',
  ));
}

/**
 * Revert feature to redesign.
 */
function dhu_update_7110() {
  $modules_to_enable = array('jquery_update');
  module_enable($modules_to_enable);

  features_include();
  $modules = array(
    'drupalhu_links',
  );

  foreach ($modules as $module) {
    features_revert_module($module);
  }
}

/**
 * Issue #215 - Cleanup in system table.
 */
function dhu_update_7111() {
  $messages = array();

  $module_names_to_delete = array(
    'commentrss',
    'drupal',
    'page',
    'quicktags',
    'story',
    'upload',
    'watchdog',
    'autolocale',
    'captcha',
    'calendar',
    'calendar_ical',
    'content',
    'content_permissions',
    'fieldgroup',
    'optionwidgets',
    'userreference',
    'comment_cck',
    'cvs_deploy',
    'date_timezone',
    'feedapi',
    'feedapi_inherit',
    'feedapi_node',
    'parser_common_syndication',
    'jquery_ui',
    'menutrails',
    'paranoia',
    'search_api_facets',
    'search_api_page',
    'tagadelic',
    'taxonomy_manager',
    'conference',
    'drupalhu',
    'duhu_deploy',
    'publishboard',
    'simplelinks',
    'filebrowser',
    'potx',
  );
  db_delete('system')
    ->condition('name', $module_names_to_delete, 'IN')
    ->execute();
  $messages[] = format_plural(
    count($module_names_to_delete),
    '@count record has been deleted from {system} table.',
    '@count records have been deleted from {system} table.'
  );

  $variables_to_delete = array(
    // Variables related to those modules which are listen in
    // $module_names_to_delete.
    'upload_extensions_3',
    'upload_extensions_default',
    'upload_feed_item',
    'upload_list_default',
    'upload_mail',
    'upload_max_resolution',
    'upload_munkakozvetito',
    'upload_uploadsize_3',
    'upload_uploadsize_default',
    'upload_usersize_3',
    'upload_usersize_default',
    'upload_weblink',
    'watchdog_clear',
    'captcha_type',
    'content_extra_weights_issue',
    'content_extra_weights_link',
    'content_extra_weights_news',
    'content_extra_weights_poll',
    'content_schema_version',
    'fieldgroup_schema_version',
    'comment_cck_fields_issue',
    'feedapi_book',
    'feedapi_faq',
    'feedapi_feed',
    'feedapi_feed_item',
    'feedapi_forum',
    'feedapi_issue',
    'feedapi_link',
    'feedapi_news',
    'feedapi_poll',
    'feedapi_settings_feedapi_node',
    'feedapi_settings_issue',
    'menutrails_breadcrumbs',
    'menutrails_menu',
    'menutrails_node_types',
    'menutrails_terms',
    'search_api_facets_current_search_options',
    'search_api_facets_search_ids',
    'tagadelic_block_tags_7',
    'tagadelic_levels',
    'tagadelic_page_amount',
    'tagadelic_sort_order',
    'drupalhu_cron_last_date',
    'filebrowser_hide_description_files',
    'filebrowser_icons',
    'filebrowser_root',

    // Variables related to non exists content types.
    'pathauto_node_story_pattern',

    'form_build_id_munkakozvetito',
    'language_content_type_munkakozvetito',
    'node_options_munkakozvetito',

    'language_content_type_weblink',
    'pathauto_node_weblink_pattern',

    // Module weblink-4.6-1.x related variables.
    'weblink_block_count',
    'weblink_link_display',
    'weblink_monitoring',
    'weblink_nav_vocabulary',
    'weblink_pager_term',
    'weblink_target_default',
    'weblink_target_user',

    // Module img_assist-6.x-? related variables.
    'img_assist_default_preview_width',
    'img_assist_img_html',
    'img_assist_loader',
    'img_assist_load_caption',
    'img_assist_max_size',
    'img_assist_preview_count',
    'img_assist_preview_filter',

    // Module notify-? related variables.
    'notify_attempts',
    'notify_send',
    'notify_send_last',

    // Module privatemsg-? related variables.
    'privatemsg_link_comment',
    'privatemsg_link_node',
    'privatemsg_max_rate',
    'privatemsg_per_page',
    'privatemsg_sent_status',

    // Unknown variable names.
    //'add_date_format_title',
    //'add_date_format_type',
    //'format',
    'gitcmd_dir',
    //'header',
    //'type',
  );
  array_walk($variables_to_delete, 'variable_del');
  $messages[] = format_plural(
    count($variables_to_delete),
    '@count variable has been deleted',
    '@count variables have been deleted'
  );

  $tables_to_drop = array(
    'search_api_facet',
    'search_api_page',
    'taxonomy_manager_merge',
  );
  array_walk($tables_to_drop, 'db_drop_table');
  $messages[] = format_plural(
    count($tables_to_drop),
    '@count database table has been deleted.',
    '@count database tables have been deleted.'
  );

  return implode((drupal_is_cli() ? PHP_EOL : '<br />'), $messages);
}

/**
 * Issue #226 - Fix schema anomalies.
 */
function dhu_update_7112() {
  // Table {flags}.
  $table_name = 'flags';
  $fields = array(
    'content_type',
    'name',
  );
  $table = drupal_get_schema($table_name);
  foreach ($fields as $field) {
    db_change_field($table_name, $field, $field, $table['fields'][$field]);
  }

  // Table {mollom}.
  $table_name = 'mollom';
  $table = drupal_get_schema($table_name);
  $keys = array(
    'indexes' => array(
      'captcha_id' => $table['indexes']['captcha_id'],
    ),
  );

  // NULL value is not allowed any more.
  db_update($table_name)
    ->fields(array(
      'captcha_id' => '',
    ))
    ->isNull('captcha_id')
    ->execute();

  db_drop_index($table_name, 'captcha_id');
  db_change_field(
    $table_name,
    'captcha_id',
    'captcha_id',
    $table['fields']['captcha_id'],
    $keys
  );

  // Field instance can't be loaded without the module (user_reference) which
  // provides the field type, therefore the field_delete_instance() can't be
  // used.
  $field_name = 'field_assigned';
  db_delete('field_config_instance')
    ->condition('field_name', $field_name)
    ->execute();

  db_delete('field_config')
    ->condition('field_name', $field_name)
    ->execute();

  db_drop_table('field_data_field_assigned');
  db_drop_table('field_revision_field_assigned');

  $field_name = 'field_geofield';
  foreach (array('field_data', 'field_revision') as $table_prefix) {
    $table_name = "{$table_prefix}_{$field_name}";
    db_change_field(
      $table_name,
      "{$field_name}_geo_type",
      "{$field_name}_geo_type",
      array(
        'type' => 'varchar',
        'default' => '',
        'length' => 64,
      )
    );
  }
}